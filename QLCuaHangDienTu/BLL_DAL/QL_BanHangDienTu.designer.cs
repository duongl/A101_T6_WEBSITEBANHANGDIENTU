#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BLL_DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="backup_16-10-2023")]
	public partial class QL_BanHangDienTuDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    partial void Insertware_house(ware_house instance);
    partial void Updateware_house(ware_house instance);
    partial void Deleteware_house(ware_house instance);
    partial void Insertbill(bill instance);
    partial void Updatebill(bill instance);
    partial void Deletebill(bill instance);
    partial void InsertbillInfo(billInfo instance);
    partial void UpdatebillInfo(billInfo instance);
    partial void DeletebillInfo(billInfo instance);
    partial void Insertcustomer(customer instance);
    partial void Updatecustomer(customer instance);
    partial void Deletecustomer(customer instance);
    partial void Insertlaptop(laptop instance);
    partial void Updatelaptop(laptop instance);
    partial void Deletelaptop(laptop instance);
    partial void InsertlaptopCategory(laptopCategory instance);
    partial void UpdatelaptopCategory(laptopCategory instance);
    partial void DeletelaptopCategory(laptopCategory instance);
    partial void Insertstaff(staff instance);
    partial void Updatestaff(staff instance);
    partial void Deletestaff(staff instance);
    partial void Insertsupplier(supplier instance);
    partial void Updatesupplier(supplier instance);
    partial void Deletesupplier(supplier instance);
    partial void Inserttransport(transport instance);
    partial void Updatetransport(transport instance);
    partial void Deletetransport(transport instance);
    #endregion
		
		public QL_BanHangDienTuDataContext() : 
				base(global::BLL_DAL.Properties.Settings.Default.QL_BanHangDienTuConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public QL_BanHangDienTuDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_BanHangDienTuDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_BanHangDienTuDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QL_BanHangDienTuDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		public System.Data.Linq.Table<ware_house> ware_houses
		{
			get
			{
				return this.GetTable<ware_house>();
			}
		}
		
		public System.Data.Linq.Table<bill> bills
		{
			get
			{
				return this.GetTable<bill>();
			}
		}
		
		public System.Data.Linq.Table<billInfo> billInfos
		{
			get
			{
				return this.GetTable<billInfo>();
			}
		}
		
		public System.Data.Linq.Table<customer> customers
		{
			get
			{
				return this.GetTable<customer>();
			}
		}
		
		public System.Data.Linq.Table<laptop> laptops
		{
			get
			{
				return this.GetTable<laptop>();
			}
		}
		
		public System.Data.Linq.Table<laptopCategory> laptopCategories
		{
			get
			{
				return this.GetTable<laptopCategory>();
			}
		}
		
		public System.Data.Linq.Table<staff> staffs
		{
			get
			{
				return this.GetTable<staff>();
			}
		}
		
		public System.Data.Linq.Table<supplier> suppliers
		{
			get
			{
				return this.GetTable<supplier>();
			}
		}
		
		public System.Data.Linq.Table<transport> transports
		{
			get
			{
				return this.GetTable<transport>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _displayName;
		
		private string _userName;
		
		private string _password;
		
		private int _type;
		
		private EntitySet<bill> _bills;
		
		private EntitySet<customer> _customers;
		
		private EntitySet<staff> _staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndisplayNameChanging(string value);
    partial void OndisplayNameChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    #endregion
		
		public account()
		{
			this._bills = new EntitySet<bill>(new Action<bill>(this.attach_bills), new Action<bill>(this.detach_bills));
			this._customers = new EntitySet<customer>(new Action<customer>(this.attach_customers), new Action<customer>(this.detach_customers));
			this._staffs = new EntitySet<staff>(new Action<staff>(this.attach_staffs), new Action<staff>(this.detach_staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_displayName", DbType="NVarChar(100)")]
		public string displayName
		{
			get
			{
				return this._displayName;
			}
			set
			{
				if ((this._displayName != value))
				{
					this.OndisplayNameChanging(value);
					this.SendPropertyChanging();
					this._displayName = value;
					this.SendPropertyChanged("displayName");
					this.OndisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_bill", Storage="_bills", ThisKey="id", OtherKey="idAccount")]
		public EntitySet<bill> bills
		{
			get
			{
				return this._bills;
			}
			set
			{
				this._bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_customer", Storage="_customers", ThisKey="id", OtherKey="idAccount")]
		public EntitySet<customer> customers
		{
			get
			{
				return this._customers;
			}
			set
			{
				this._customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_staff", Storage="_staffs", ThisKey="id", OtherKey="idAccount")]
		public EntitySet<staff> staffs
		{
			get
			{
				return this._staffs;
			}
			set
			{
				this._staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bills(bill entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_bills(bill entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_customers(customer entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_customers(customer entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
		
		private void attach_staffs(staff entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_staffs(staff entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[ware house]")]
	public partial class ware_house : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _import;
		
		private string _export;
		
		private string _update;
		
		private System.Nullable<int> _id_transport;
		
		private EntitySet<supplier> _suppliers;
		
		private EntityRef<transport> _transport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnimportChanging(string value);
    partial void OnimportChanged();
    partial void OnexportChanging(string value);
    partial void OnexportChanged();
    partial void OnupdateChanging(string value);
    partial void OnupdateChanged();
    partial void Onid_transportChanging(System.Nullable<int> value);
    partial void Onid_transportChanged();
    #endregion
		
		public ware_house()
		{
			this._suppliers = new EntitySet<supplier>(new Action<supplier>(this.attach_suppliers), new Action<supplier>(this.detach_suppliers));
			this._transport = default(EntityRef<transport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_import", DbType="NVarChar(50)")]
		public string import
		{
			get
			{
				return this._import;
			}
			set
			{
				if ((this._import != value))
				{
					this.OnimportChanging(value);
					this.SendPropertyChanging();
					this._import = value;
					this.SendPropertyChanged("import");
					this.OnimportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_export", DbType="NVarChar(50)")]
		public string export
		{
			get
			{
				return this._export;
			}
			set
			{
				if ((this._export != value))
				{
					this.OnexportChanging(value);
					this.SendPropertyChanging();
					this._export = value;
					this.SendPropertyChanged("export");
					this.OnexportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[update]", Storage="_update", DbType="NChar(100)")]
		public string update
		{
			get
			{
				return this._update;
			}
			set
			{
				if ((this._update != value))
				{
					this.OnupdateChanging(value);
					this.SendPropertyChanging();
					this._update = value;
					this.SendPropertyChanged("update");
					this.OnupdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[id transport]", Storage="_id_transport", DbType="Int")]
		public System.Nullable<int> id_transport
		{
			get
			{
				return this._id_transport;
			}
			set
			{
				if ((this._id_transport != value))
				{
					this.Onid_transportChanging(value);
					this.SendPropertyChanging();
					this._id_transport = value;
					this.SendPropertyChanged("id_transport");
					this.Onid_transportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ware_house_supplier", Storage="_suppliers", ThisKey="id", OtherKey="idWareHouse")]
		public EntitySet<supplier> suppliers
		{
			get
			{
				return this._suppliers;
			}
			set
			{
				this._suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="transport_ware_house", Storage="_transport", ThisKey="id_transport", OtherKey="id", IsForeignKey=true)]
		public transport transport
		{
			get
			{
				return this._transport.Entity;
			}
			set
			{
				transport previousValue = this._transport.Entity;
				if (((previousValue != value) 
							|| (this._transport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._transport.Entity = null;
						previousValue.ware_houses.Remove(this);
					}
					this._transport.Entity = value;
					if ((value != null))
					{
						value.ware_houses.Add(this);
						this._id_transport = value.id;
					}
					else
					{
						this._id_transport = default(Nullable<int>);
					}
					this.SendPropertyChanged("transport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_suppliers(supplier entity)
		{
			this.SendPropertyChanging();
			entity.ware_house = this;
		}
		
		private void detach_suppliers(supplier entity)
		{
			this.SendPropertyChanging();
			entity.ware_house = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bill")]
	public partial class bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idAccount;
		
		private int _status;
		
		private System.Nullable<System.DateTime> _datepay;
		
		private EntitySet<billInfo> _billInfos;
		
		private EntitySet<transport> _transports;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidAccountChanging(int value);
    partial void OnidAccountChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndatepayChanging(System.Nullable<System.DateTime> value);
    partial void OndatepayChanged();
    #endregion
		
		public bill()
		{
			this._billInfos = new EntitySet<billInfo>(new Action<billInfo>(this.attach_billInfos), new Action<billInfo>(this.detach_billInfos));
			this._transports = new EntitySet<transport>(new Action<transport>(this.attach_transports), new Action<transport>(this.detach_transports));
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccount", DbType="Int NOT NULL")]
		public int idAccount
		{
			get
			{
				return this._idAccount;
			}
			set
			{
				if ((this._idAccount != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAccountChanging(value);
					this.SendPropertyChanging();
					this._idAccount = value;
					this.SendPropertyChanged("idAccount");
					this.OnidAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datepay", DbType="Date")]
		public System.Nullable<System.DateTime> datepay
		{
			get
			{
				return this._datepay;
			}
			set
			{
				if ((this._datepay != value))
				{
					this.OndatepayChanging(value);
					this.SendPropertyChanging();
					this._datepay = value;
					this.SendPropertyChanged("datepay");
					this.OndatepayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bill_billInfo", Storage="_billInfos", ThisKey="id", OtherKey="idBill")]
		public EntitySet<billInfo> billInfos
		{
			get
			{
				return this._billInfos;
			}
			set
			{
				this._billInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bill_transport", Storage="_transports", ThisKey="id", OtherKey="idBill")]
		public EntitySet<transport> transports
		{
			get
			{
				return this._transports;
			}
			set
			{
				this._transports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_bill", Storage="_account", ThisKey="idAccount", OtherKey="id", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.bills.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.bills.Add(this);
						this._idAccount = value.id;
					}
					else
					{
						this._idAccount = default(int);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_billInfos(billInfo entity)
		{
			this.SendPropertyChanging();
			entity.bill = this;
		}
		
		private void detach_billInfos(billInfo entity)
		{
			this.SendPropertyChanging();
			entity.bill = null;
		}
		
		private void attach_transports(transport entity)
		{
			this.SendPropertyChanging();
			entity.bill = this;
		}
		
		private void detach_transports(transport entity)
		{
			this.SendPropertyChanging();
			entity.bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.billInfo")]
	public partial class billInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idBill;
		
		private int _idLaptop;
		
		private int _counts;
		
		private EntityRef<bill> _bill;
		
		private EntityRef<laptop> _laptop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidBillChanging(int value);
    partial void OnidBillChanged();
    partial void OnidLaptopChanging(int value);
    partial void OnidLaptopChanged();
    partial void OncountsChanging(int value);
    partial void OncountsChanged();
    #endregion
		
		public billInfo()
		{
			this._bill = default(EntityRef<bill>);
			this._laptop = default(EntityRef<laptop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBill", DbType="Int NOT NULL")]
		public int idBill
		{
			get
			{
				return this._idBill;
			}
			set
			{
				if ((this._idBill != value))
				{
					if (this._bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBillChanging(value);
					this.SendPropertyChanging();
					this._idBill = value;
					this.SendPropertyChanged("idBill");
					this.OnidBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLaptop", DbType="Int NOT NULL")]
		public int idLaptop
		{
			get
			{
				return this._idLaptop;
			}
			set
			{
				if ((this._idLaptop != value))
				{
					if (this._laptop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidLaptopChanging(value);
					this.SendPropertyChanging();
					this._idLaptop = value;
					this.SendPropertyChanged("idLaptop");
					this.OnidLaptopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_counts", DbType="Int NOT NULL")]
		public int counts
		{
			get
			{
				return this._counts;
			}
			set
			{
				if ((this._counts != value))
				{
					this.OncountsChanging(value);
					this.SendPropertyChanging();
					this._counts = value;
					this.SendPropertyChanged("counts");
					this.OncountsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bill_billInfo", Storage="_bill", ThisKey="idBill", OtherKey="id", IsForeignKey=true)]
		public bill bill
		{
			get
			{
				return this._bill.Entity;
			}
			set
			{
				bill previousValue = this._bill.Entity;
				if (((previousValue != value) 
							|| (this._bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bill.Entity = null;
						previousValue.billInfos.Remove(this);
					}
					this._bill.Entity = value;
					if ((value != null))
					{
						value.billInfos.Add(this);
						this._idBill = value.id;
					}
					else
					{
						this._idBill = default(int);
					}
					this.SendPropertyChanged("bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="laptop_billInfo", Storage="_laptop", ThisKey="idLaptop", OtherKey="id", IsForeignKey=true)]
		public laptop laptop
		{
			get
			{
				return this._laptop.Entity;
			}
			set
			{
				laptop previousValue = this._laptop.Entity;
				if (((previousValue != value) 
							|| (this._laptop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._laptop.Entity = null;
						previousValue.billInfos.Remove(this);
					}
					this._laptop.Entity = value;
					if ((value != null))
					{
						value.billInfos.Add(this);
						this._idLaptop = value.id;
					}
					else
					{
						this._idLaptop = default(int);
					}
					this.SendPropertyChanged("laptop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customer")]
	public partial class customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private string _address;
		
		private string _phone;
		
		private string _sex;
		
		private string _email;
		
		private System.Nullable<int> _idAccount;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnsexChanging(string value);
    partial void OnsexChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnidAccountChanging(System.Nullable<int> value);
    partial void OnidAccountChanged();
    #endregion
		
		public customer()
		{
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NChar(50)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sex", DbType="NChar(3)")]
		public string sex
		{
			get
			{
				return this._sex;
			}
			set
			{
				if ((this._sex != value))
				{
					this.OnsexChanging(value);
					this.SendPropertyChanging();
					this._sex = value;
					this.SendPropertyChanged("sex");
					this.OnsexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(20)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccount", DbType="Int")]
		public System.Nullable<int> idAccount
		{
			get
			{
				return this._idAccount;
			}
			set
			{
				if ((this._idAccount != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAccountChanging(value);
					this.SendPropertyChanging();
					this._idAccount = value;
					this.SendPropertyChanged("idAccount");
					this.OnidAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_customer", Storage="_account", ThisKey="idAccount", OtherKey="id", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.customers.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.customers.Add(this);
						this._idAccount = value.id;
					}
					else
					{
						this._idAccount = default(Nullable<int>);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.laptop")]
	public partial class laptop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private int _idCategory;
		
		private double _price;
		
		private string _productCompany;
		
		private double _monitor;
		
		private string _CPU;
		
		private string _RAM;
		
		private string _Image;
		
		private string _GPU;
		
		private string _HardDisk;
		
		private EntitySet<billInfo> _billInfos;
		
		private EntityRef<laptopCategory> _laptopCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnidCategoryChanging(int value);
    partial void OnidCategoryChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnproductCompanyChanging(string value);
    partial void OnproductCompanyChanged();
    partial void OnmonitorChanging(double value);
    partial void OnmonitorChanged();
    partial void OnCPUChanging(string value);
    partial void OnCPUChanged();
    partial void OnRAMChanging(string value);
    partial void OnRAMChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnGPUChanging(string value);
    partial void OnGPUChanged();
    partial void OnHardDiskChanging(string value);
    partial void OnHardDiskChanged();
    #endregion
		
		public laptop()
		{
			this._billInfos = new EntitySet<billInfo>(new Action<billInfo>(this.attach_billInfos), new Action<billInfo>(this.detach_billInfos));
			this._laptopCategory = default(EntityRef<laptopCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCategory", DbType="Int NOT NULL")]
		public int idCategory
		{
			get
			{
				return this._idCategory;
			}
			set
			{
				if ((this._idCategory != value))
				{
					if (this._laptopCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCategoryChanging(value);
					this.SendPropertyChanging();
					this._idCategory = value;
					this.SendPropertyChanged("idCategory");
					this.OnidCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productCompany", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string productCompany
		{
			get
			{
				return this._productCompany;
			}
			set
			{
				if ((this._productCompany != value))
				{
					this.OnproductCompanyChanging(value);
					this.SendPropertyChanging();
					this._productCompany = value;
					this.SendPropertyChanged("productCompany");
					this.OnproductCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_monitor", DbType="Float NOT NULL")]
		public double monitor
		{
			get
			{
				return this._monitor;
			}
			set
			{
				if ((this._monitor != value))
				{
					this.OnmonitorChanging(value);
					this.SendPropertyChanging();
					this._monitor = value;
					this.SendPropertyChanged("monitor");
					this.OnmonitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CPU", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CPU
		{
			get
			{
				return this._CPU;
			}
			set
			{
				if ((this._CPU != value))
				{
					this.OnCPUChanging(value);
					this.SendPropertyChanging();
					this._CPU = value;
					this.SendPropertyChanged("CPU");
					this.OnCPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAM", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RAM
		{
			get
			{
				return this._RAM;
			}
			set
			{
				if ((this._RAM != value))
				{
					this.OnRAMChanging(value);
					this.SendPropertyChanging();
					this._RAM = value;
					this.SendPropertyChanged("RAM");
					this.OnRAMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPU", DbType="NVarChar(100)")]
		public string GPU
		{
			get
			{
				return this._GPU;
			}
			set
			{
				if ((this._GPU != value))
				{
					this.OnGPUChanging(value);
					this.SendPropertyChanging();
					this._GPU = value;
					this.SendPropertyChanged("GPU");
					this.OnGPUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HardDisk", DbType="NVarChar(100)")]
		public string HardDisk
		{
			get
			{
				return this._HardDisk;
			}
			set
			{
				if ((this._HardDisk != value))
				{
					this.OnHardDiskChanging(value);
					this.SendPropertyChanging();
					this._HardDisk = value;
					this.SendPropertyChanged("HardDisk");
					this.OnHardDiskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="laptop_billInfo", Storage="_billInfos", ThisKey="id", OtherKey="idLaptop")]
		public EntitySet<billInfo> billInfos
		{
			get
			{
				return this._billInfos;
			}
			set
			{
				this._billInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="laptopCategory_laptop", Storage="_laptopCategory", ThisKey="idCategory", OtherKey="id", IsForeignKey=true)]
		public laptopCategory laptopCategory
		{
			get
			{
				return this._laptopCategory.Entity;
			}
			set
			{
				laptopCategory previousValue = this._laptopCategory.Entity;
				if (((previousValue != value) 
							|| (this._laptopCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._laptopCategory.Entity = null;
						previousValue.laptops.Remove(this);
					}
					this._laptopCategory.Entity = value;
					if ((value != null))
					{
						value.laptops.Add(this);
						this._idCategory = value.id;
					}
					else
					{
						this._idCategory = default(int);
					}
					this.SendPropertyChanged("laptopCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_billInfos(billInfo entity)
		{
			this.SendPropertyChanging();
			entity.laptop = this;
		}
		
		private void detach_billInfos(billInfo entity)
		{
			this.SendPropertyChanging();
			entity.laptop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.laptopCategory")]
	public partial class laptopCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private EntitySet<laptop> _laptops;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public laptopCategory()
		{
			this._laptops = new EntitySet<laptop>(new Action<laptop>(this.attach_laptops), new Action<laptop>(this.detach_laptops));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="laptopCategory_laptop", Storage="_laptops", ThisKey="id", OtherKey="idCategory")]
		public EntitySet<laptop> laptops
		{
			get
			{
				return this._laptops;
			}
			set
			{
				this._laptops.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_laptops(laptop entity)
		{
			this.SendPropertyChanging();
			entity.laptopCategory = this;
		}
		
		private void detach_laptops(laptop entity)
		{
			this.SendPropertyChanging();
			entity.laptopCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.staff")]
	public partial class staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Sex;
		
		private string _Phone;
		
		private System.Nullable<int> _idAccount;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnidAccountChanging(System.Nullable<int> value);
    partial void OnidAccountChanged();
    #endregion
		
		public staff()
		{
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NChar(3)")]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccount", DbType="Int")]
		public System.Nullable<int> idAccount
		{
			get
			{
				return this._idAccount;
			}
			set
			{
				if ((this._idAccount != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAccountChanging(value);
					this.SendPropertyChanging();
					this._idAccount = value;
					this.SendPropertyChanged("idAccount");
					this.OnidAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_staff", Storage="_account", ThisKey="idAccount", OtherKey="id", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.staffs.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.staffs.Add(this);
						this._idAccount = value.id;
					}
					else
					{
						this._idAccount = default(Nullable<int>);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.supplier")]
	public partial class supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _address;
		
		private System.Nullable<int> _phone;
		
		private string _email;
		
		private System.Nullable<int> _idWareHouse;
		
		private EntityRef<ware_house> _ware_house;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneChanging(System.Nullable<int> value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnidWareHouseChanging(System.Nullable<int> value);
    partial void OnidWareHouseChanged();
    #endregion
		
		public supplier()
		{
			this._ware_house = default(EntityRef<ware_house>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Int")]
		public System.Nullable<int> phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NChar(10)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idWareHouse", DbType="Int")]
		public System.Nullable<int> idWareHouse
		{
			get
			{
				return this._idWareHouse;
			}
			set
			{
				if ((this._idWareHouse != value))
				{
					if (this._ware_house.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidWareHouseChanging(value);
					this.SendPropertyChanging();
					this._idWareHouse = value;
					this.SendPropertyChanged("idWareHouse");
					this.OnidWareHouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ware_house_supplier", Storage="_ware_house", ThisKey="idWareHouse", OtherKey="id", IsForeignKey=true)]
		public ware_house ware_house
		{
			get
			{
				return this._ware_house.Entity;
			}
			set
			{
				ware_house previousValue = this._ware_house.Entity;
				if (((previousValue != value) 
							|| (this._ware_house.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ware_house.Entity = null;
						previousValue.suppliers.Remove(this);
					}
					this._ware_house.Entity = value;
					if ((value != null))
					{
						value.suppliers.Add(this);
						this._idWareHouse = value.id;
					}
					else
					{
						this._idWareHouse = default(Nullable<int>);
					}
					this.SendPropertyChanged("ware_house");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.transport")]
	public partial class transport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _dateship;
		
		private string _address;
		
		private string _customer;
		
		private System.Nullable<int> _idBill;
		
		private EntitySet<ware_house> _ware_houses;
		
		private EntityRef<bill> _bill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndateshipChanging(System.Nullable<System.DateTime> value);
    partial void OndateshipChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OncustomerChanging(string value);
    partial void OncustomerChanged();
    partial void OnidBillChanging(System.Nullable<int> value);
    partial void OnidBillChanged();
    #endregion
		
		public transport()
		{
			this._ware_houses = new EntitySet<ware_house>(new Action<ware_house>(this.attach_ware_houses), new Action<ware_house>(this.detach_ware_houses));
			this._bill = default(EntityRef<bill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateship", DbType="Date")]
		public System.Nullable<System.DateTime> dateship
		{
			get
			{
				return this._dateship;
			}
			set
			{
				if ((this._dateship != value))
				{
					this.OndateshipChanging(value);
					this.SendPropertyChanging();
					this._dateship = value;
					this.SendPropertyChanged("dateship");
					this.OndateshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NChar(20)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer", DbType="NVarChar(50)")]
		public string customer
		{
			get
			{
				return this._customer;
			}
			set
			{
				if ((this._customer != value))
				{
					this.OncustomerChanging(value);
					this.SendPropertyChanging();
					this._customer = value;
					this.SendPropertyChanged("customer");
					this.OncustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBill", DbType="Int")]
		public System.Nullable<int> idBill
		{
			get
			{
				return this._idBill;
			}
			set
			{
				if ((this._idBill != value))
				{
					if (this._bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBillChanging(value);
					this.SendPropertyChanging();
					this._idBill = value;
					this.SendPropertyChanged("idBill");
					this.OnidBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="transport_ware_house", Storage="_ware_houses", ThisKey="id", OtherKey="id_transport")]
		public EntitySet<ware_house> ware_houses
		{
			get
			{
				return this._ware_houses;
			}
			set
			{
				this._ware_houses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bill_transport", Storage="_bill", ThisKey="idBill", OtherKey="id", IsForeignKey=true)]
		public bill bill
		{
			get
			{
				return this._bill.Entity;
			}
			set
			{
				bill previousValue = this._bill.Entity;
				if (((previousValue != value) 
							|| (this._bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bill.Entity = null;
						previousValue.transports.Remove(this);
					}
					this._bill.Entity = value;
					if ((value != null))
					{
						value.transports.Add(this);
						this._idBill = value.id;
					}
					else
					{
						this._idBill = default(Nullable<int>);
					}
					this.SendPropertyChanged("bill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ware_houses(ware_house entity)
		{
			this.SendPropertyChanging();
			entity.transport = this;
		}
		
		private void detach_ware_houses(ware_house entity)
		{
			this.SendPropertyChanging();
			entity.transport = null;
		}
	}
}
#pragma warning restore 1591
